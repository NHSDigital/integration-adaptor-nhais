pipeline {
    agent{
        label 'jenkins-workers'
    }

    options {
        timestamps()
        buildDiscarder(logRotator(numToKeepStr: "10")) // keep only last 10 builds
    }
    
    environment {
        DOCKER_IMAGE = "${DOCKER_REGISTRY}/${ECR_REPO_DIR}:${BUILD_TAG}"
        FAKE_MESH_ECR_REPO_DIR = "nhais-fake-mesh"
        FAKE_MESH_VERSION = "0.2.0"
        FAKE_MESH_IMAGE = "${DOCKER_REGISTRY}/${FAKE_MESH_ECR_REPO_DIR}:${FAKE_MESH_VERSION}"
    }    

    stages {
        stage('Deploy fake-mesh to ECR') {
            steps {
                script {
                    sh label: "Pulling fake-mesh image", script: "docker pull nhsdev/fake-mesh:0.2.0"
                    sh label: "Re-tag fake-mesh image", script: "docker image tag nhsdev/fake-mesh:0.2.0 ${FAKE_MESH_IMAGE}"
                    if (ecrLogin(TF_STATE_BUCKET_REGION) != 0 )  { error("Docker login to ECR failed") }
                    String dockerPushCommand = "docker push ${FAKE_MESH_IMAGE}"
                    if (sh (label: "Pushing image", script: dockerPushCommand, returnStatus: true) !=0) { error("Docker push image failed") }
                }
            }
        }
    }
    post {
        always {
            sh label: 'Remove all unused images not just dangling ones', script:'docker system prune --force'
            sh 'docker image rm -f $(docker images "*/*:*${BUILD_TAG}" -q) $(docker images "*/*/*:*${BUILD_TAG}" -q) || true'
        }
    }
}

int ecrLogin(String aws_region) {
    String ecrCommand = "aws ecr get-login --region ${aws_region}"
    String dockerLogin = sh (label: "Getting Docker login from ECR", script: ecrCommand, returnStdout: true).replace("-e none","") // some parameters that AWS provides and docker does not recognize
    return sh(label: "Logging in with Docker", script: dockerLogin, returnStatus: true)
}
